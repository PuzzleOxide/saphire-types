use either :: Either ; use crate :: types :: * ; pub enum SetVariable { SettoString { variable_to_set : Variable , string_to_set_to : Vec < AnyType > } , SetParticleEffectType { variable_to_set : Variable , effect_to : Option < Particle > , type_ : Text } , SetItemEnchants { } , PurgeMatchingVariables { name_to_match : Vec < Text > } , ShiftLocationonAllAxes { variable_to_set : Variable , location_to_change : Option < Location > , x_change : Option < Number > , y_change : Option < Number > , z_change : Option < Number > } , GetParticleEffectMaterial { variable_to_set : Variable , effect_to_get : Particle } , SetParticleEffectSpread { variable_to_set : Variable , effect_to_change : Option < Particle > , horizontal_spread : Number , vertical_spread : Number } , SettoAbsoluteValue { variable_to_set : Variable , number_input : Option < Number > } , AppendValuetoList { list_to_append_to : Variable , values_to_append : Vec < AnyType > } , SettoRemainder { variable_to_set : Variable , dividend : Number , divisor : Number } , ShiftLocationonVector { variable_to_set : Variable , location_to_shift : Option < Location > , shift_vector : Vector , shift_distance : Option < Number > } , GetItemAttribute { variable_to_set : Variable , item : Item } , ClearDictionary { dictionary_to_clear : Variable } , AddNumbers { variable_to_set : Variable , numbers_to_add : Vec < Number > } , ShiftLocationRotation { variable_to_set : Variable , location_to_shift : Option < Location > , rotation_amount : Number } , SubtractNumbers { variable_to_set : Variable , numbers_to_subtract : Vec < Number > } , GetItemName { variable_to_set : Variable , item_to_get_name_of : Item } , GetItemRarity { variable_to_set : Variable , item : Item } , MultiplyVector { variable_to_set : Variable , vector_to_multiply : Option < Vector > , multiplier : Number } , DivideNumbers { variable_to_set : Variable , numbers_to_divide : Vec < Number > } , GetSignText { } , SettoBitwiseOperation { variable_to_set : Variable , operand_1 : Number , operand_2 : Option < Number > } , GetLecternPage { variable_to_set : Variable , lectern_location : Location } , ParseX { } , ShiftLocationonAxis { variable_to_set : Variable , location_to_shift : Option < Location > , shift_distance : Number } , ParseY { } , SettoVectorBetweenLocations { variable_to_set : Variable , start_location : Location , end_location : Location } , ParseZ { } , GetVectorComponent { variable_to_set : Variable , vector_to_get : Vector } , SettoValueEq { variable_to_set : Variable , value : AnyType } , RmText { } , AddItemAttribute { variable_to_set : Variable , item : Option < Item > , modifier_amount : Number } , SettoCenterLocation { variable_to_set : Variable , locations_to_center : Vec < Location > } , AlignLocation { variable_to_set : Variable , location_to_align : Option < Location > } , GetSoundVolume { variable_to_set : Variable , sound_to_get_volume_of : Sound } , SettoRandomNumber { variable_to_set : Variable , minimum_number : Number , maximum_number : Number } , GetContainerName { variable_to_set : Variable , container_location : Location } , RaycastfromLocation { variable_to_set : Variable , ray_origin : Location , ray_distance : Number } , RotateVectorAroundVector { variable_to_set : Variable , vector_to_rotate : Option < Vector > , axis_vector : Vector , angle : Number } , GetParticleEffectMotion { variable_to_set : Variable , effect_to_get : Particle } , SetParticleMotion { variable_to_set : Variable , effect_to : Option < Particle > , particle_motion : Option < Vector > , motion_variation_ : Option < Number > } , SettoAverageNumber { variable_to_set : Variable , numbers_to_average : Vec < Number > } , WrapNumberOld { } , SetY { } , SetMapTexture { variable_to_set : Variable , item_to_change : Option < Item > , image_url : Text } , GetBlockData { variable_to_set : Variable , block_location : Location , tag_name : Text } , SetX { } , SortDictionary { variable_to_set : Variable , dictionary_to_sort : Option < Dict > } , GetLecternBook { variable_to_set : Variable , lectern_location : Location } , GetCustomSoundKey { variable_to_set : Variable , sound_to_get_key_of : Sound } , SettoCrossProduct { variable_to_set : Variable , vector_1 : Vector , vector_2 : Vector } , MultiplyNumbers { variable_to_set : Variable , numbers_to_multiply : Vec < Number > } , GetParticleRoll { variable_to_set : Variable , effect_to_get : Option < Particle > } , ParseYaw { } , SettoDotProduct { variable_to_set : Variable , vector_1 : Vector , vector_2 : Vector } , SetZ { } , SetArmorTrim { variable_to_set : Variable , item_to_change : Option < Item > } , PopListValue { variable_to_set : Variable , list_to_get_value_of : List , index : Option < Number > } , SettoMinimumNumber { variable_to_set : Variable , number_set : Vec < Number > } , GetPotionEffectType { variable_to_set : Variable , potion_to_get : Potion } , SetItemName { variable_to_set : Variable , item_to_change : Option < Item > , name : Vec < MiniMessage > } , GetListLength { variable_to_set : Variable , list_to_measure : List } , SettoSine { variable_to_set : Variable , number_input : Number } , SettoDirectionName { variable_to_set : Variable , direction : Vector } , RepeatString { variable_to_set : Variable , string_to_repeat : Text , times_to_repeat : Number } , GetItemLore { } , JoinString { variable_to_set : Variable , strings_to_join : List , joining_string : Option < Text > , final_joining_string : Option < Text > } , ReverseList { variable_to_set : Variable , list_to_reverse : Option < List > } , RemoveDuplicateListElements { variable_to_set : Variable , list_to_deduplicate : Option < List > } , CreateDictionary { variable_to_set : Variable , key_list : Option < List > , value_list : Option < List > } , RoundNumber { } , FaceLocation { variable_to_set : Variable , location_to_change : Option < Location > , target_location : Location } , GetItemLoreLine { } , SetVectorLength { variable_to_set : Variable , vector_to_change : Option < Vector > , length : Option < Number > } , SetPotionEffectDuration { variable_to_set : Variable , potion_to_change : Option < Potion > , duration_ticks : Number } , SplitString { variable_to_set : Variable , string_to_split : Text , splitter_string : Option < Text > } , SettoNormallyDistributedRandomNumber { variable_to_set : Variable , mean_midpoint : Number , standard_deviation : Number } , SetPotionEffectType { variable_to_set : Variable , potion_to_change : Option < Potion > , type_ : Text } , AlignVector { variable_to_set : Variable , vector_to_align : Option < Vector > } , SetItemDurability { variable_to_set : Variable , item : Option < Item > , item_durability : Number } , SetItemBreakability { variable_to_set : Variable , item : Option < Item > } , GetSignTextN { variable_to_set : Variable , location : Location } , RaycastEntity { } , SetDictionaryValue { dictionary_to_add_to : Variable , key : Text , value : AnyType } , SetAllLocationCoordinates { variable_to_set : Variable , location_to_change : Option < Location > , new_x : Option < Number > , new_y : Option < Number > , new_z : Option < Number > , new_pitch : Option < Number > , new_yaw : Option < Number > } , SettoRGBColor { variable_to_set : Variable , red_c07c2557 : Number , green_c07c2557 : Number , blue_c07c2557 : Either < Number , List > } , SetBreakableBlocks { variable_to_set : Variable , item_to_change : Option < Item > , breakable_blocks : Vec < Block > } , SettoHSLColor { variable_to_set : Variable , hue_color_circle_c07c3607 : Number , saturation_c07c1007 : Option < Number > , lightness_c07c1007 : Option < Either < Number , List > > } , GetDirection { } , GetItemLoreN { variable_to_set : Variable , item_to_get_lore_from : Item } , RemoveListValueatIndex { list_to_change : Variable , index_to_remove : Vec < Number > } , SettoLogarithm { variable_to_set : Variable , number_input : Option < Number > , base : Number } , SetItemCustomTag { variable_to_set : Variable , item_to_change : Option < Item > , tag_name : Text , tag_value : Either < Number , Text > } , TrimString { variable_to_set : Variable , string_to_trim : Option < Text > , start_character_position : Number , end_character_position : Option < Number > } , ParseMiniMessageExpression { variable_to_set : Variable , string_to_parse : Text } , GetItemStackSize { variable_to_set : Variable , item_to_get_stack : Item } , SetPotionEffectAmplifier { variable_to_set : Variable , potion_to_change : Option < Potion > , amplifier : Number } , GetBreakableBlocks { variable_to_set : Variable , item : Item } , RotateVectorAroundAxis { variable_to_set : Variable , vector_to_rotate : Option < Vector > , angle : Number } , GetItemNameN { } , GetItemDurability { variable_to_set : Variable , item : Item } , ShiftLocationinDirection { variable_to_set : Variable , location_to_shift : Option < Location > , shift_distance : Option < Number > } , WrapNumber { variable_to_set : Variable , number_to_wrap : Option < Number > , lower_bound_inclusive : Number , upper_bound_exclusive : Number } , ReplaceString { variable : Variable , string_to_change : Text , string_part_to_replace : Text , replacement : Text } , SetCompassLodestoneLocation { variable_to_set : Variable , item_to_change : Option < Item > , lodestone_location : Location } , FlattenList { variable_to_set : Variable , list_to_flatten : Option < List > } , GetPotionEffectAmplifier { variable_to_set : Variable , potion_to_get : Potion } , GetParticleEffectAmount { variable_to_set : Variable , effect_to_get : Particle } , GetDictionarySize { variable_to_set : Variable , dictionary_to : Dict } , SetItemStackSize { variable_to_set : Variable , item_to_change : Option < Item > , stack_size : Number } , SubtractVectors { variable_to_set : Variable , vectors_to_subtract : Vec < Vector > } , SetStringCase { variable_to_set : Variable , string_to_change : Option < Text > } , SetParticleEffectColor { variable_to_set : Variable , effect_to : Option < Particle > , color_hexadecimal : Text , color_variation_ : Option < Number > } , GetLightLevel { variable_to_set : Variable , light_location : Location } , GetBookText { variable_to_set : Variable , book : Item , page_number : Option < Number > } , GetDictionaryValues { variable_to_set : Variable , dictionary_to : Dict } , SettoVector { variable_to_set : Variable , x_component : Number , y_component : Number , z_component : Number } , SettoDistance { variable_to_set : Variable , location_1 : Location , location_2 : Location } , SetItemLore { variable_to_set : Variable , item_to_change : Option < Item > , lore : Vec < Either < MiniMessage , MiniMessage > > , line_number : Number } , SettoRoot { variable_to_set : Variable , number_input : Option < Number > , root_index : Option < Number > } , SetParticleEffectAmount { variable_to_set : Variable , effect_to : Option < Particle > , particle_amount : Number } , AddItemEnchantment { variable_to_set : Variable , item_to_change : Option < Item > , enchantment_name : Text , enchantment_level : Number } , GetItemMaterial { variable_to_set : Variable , item_to_get_material_of : Item } , GetLocationDirection { variable_to_set : Variable , location_to_get : Location } , GetLoreLine { variable_to_set : Variable , item_to_get_lore_from : Item , lore_line_to_get : Number } , GetParticleEffectType { variable_to_set : Variable , effect_to_get : Particle } , RemoveString { variable : Variable , string_to_change : Option < Text > , string_to_remove : Vec < Text > } , GetAllBlockData { variable_to_set : Variable , block_location : Location } , SettoMaximumNumber { variable_to_set : Variable , number_set : Vec < Number > } , GetDictionaryKeys { variable_to_set : Variable , dictionary_to : Dict } , TrimStyledTextContent { variable_to_set : Variable , text_to_trim : Option < MiniMessage > , start_character_position : Number , end_character_position : Option < Number > } , SetParticleEffectMaterial { variable_to_set : Variable , effect_to : Option < Particle > , particle_material : Item } , GetLocationCoordinate { variable_to_set : Variable , location_to_get : Location } , RemoveItemCustomTag { variable_to_set : Variable , item_to_change : Option < Item > , tag_name : Text } , SetParticleEffectSize { variable_to_set : Variable , effect_to : Option < Particle > , particle_size : Number , size_variation_ : Option < Number > } , GetPotionEffectDuration { variable_to_set : Variable , potion_to_get : Potion } , SettoRandomLocation { variable_to_set : Variable , location_1 : Location , location_2 : Location } , SetSoundType { variable_to_set : Variable , sound_to_change : Option < Sound > , sound_name_eg_rabbit_eat : Text } , GetCompassLodestoneLocation { variable_to_set : Variable , compass_to_get_lodestone : Item } , ShiftDirection { } , GetContainerNameN { } , GetParticleEffectSpread { variable_to_set : Variable , effect_to_get : Particle } , ReflectVector { variable_to_set : Variable , vector_to_reflect : Option < Vector > , surface_vector : Vector } , GetHeadOwner { variable_to_set : Variable , head_to_get_owner_of : Item } , GetItemEnchants { } , AppendDictionary { dictionary_to : Variable , dictionary : Dict } , GetItemMaximumStackSize { variable_to_set : Variable , item_to_get_maximum_stack : Item } , GetColorChannels { variable_to_set : Variable , color_hexadecimal : Text } , SetLocationDirection { variable_to_set : Variable , location_to_change : Option < Location > , direction : Vector } , SetListValue { list_to_change : Variable , index : Number , value_to_set : AnyType } , SetItemEnchantments { variable_to_set : Variable , item_to_change : Option < Item > , enchantments : Dict } , SetBookText { variable_to_set : Variable , book : Option < Item > , pages : Vec < Either < MiniMessage , MiniMessage > > , page_number : Number } , SettoRandomValue { variable_to_set : Variable , value_set : Vec < AnyType > } , SetItemMaterial { variable_to_set : Variable , item_to_change : Option < Item > , material : Text } , GetSoundType { variable_to_set : Variable , sound_to_get_type__of : Sound } , GetListValue { variable_to_set : Variable , list_to_get_value_of : List , index : Number } , SettoTangent { variable_to_set : Variable , number_input : Number } , GetVoronoiNoise { variable_to_set : Variable , noise_location : Location , cell_frequency : Option < Number > , cell_scatter : Option < Number > , generation_seed : Option < Number > } , SetDirection { } , SettoHSBColor { variable_to_set : Variable , hue_color_circle_c07c3607 : Number , saturation_c07c1007 : Option < Number > , brightness_c07c1007 : Option < Either < Number , List > > } , IncrementNumberEq { variable : Variable , numbers_to : Vec < Number > } , GetSoundVariant { variable_to_set : Variable , sound_to_get_variant_of : Sound } , GetItemColor { variable : Variable , item_to_get_color_of : Item } , ClearFormatting { variable_to_set : Variable , text_to_change : Option < MiniMessage > } , InsertListValue { list_to_change : Variable , index : Number , value_to_insert : AnyType } , SetSoundVolume { variable_to_set : Variable , sound_to_change : Option < Sound > , volume : Number } , SetLocationCoordinate { variable_to_set : Variable , location_to_change : Option < Location > , coordinate : Number } , AddVectors { variable_to_set : Variable , vectors_to_add : Vec < Vector > } , SetPitch { } , RaycastBlock { } , GetItemEnchantments { variable_to_set : Variable , item_to_get_enchantments_from : Item } , SetHeadTexture { variable_to_set : Variable , player_head : Option < Item > , owner_name_uuid_or : Text } , GetPerlinNoise { variable_to_set : Variable , noise_location : Location , frequency_scale : Option < Number > , octaves_perlin_layers : Option < Number > , octave_frequency_gain : Option < Number > , octave_amplitude_gain : Option < Number > , generation_seed : Option < Number > } , GetWorleyNoise { variable_to_set : Variable , noise_location : Location , cell_frequency : Option < Number > , cell_scatter : Option < Number > , generation_seed : Option < Number > } , SetItemColor { variable_to_set : Variable , item_to_change : Option < Item > , color_hexadecimal : Text } , GetParticleEffectColor { variable_to_set : Variable , effect_to_get : Particle } , SetSoundPitch { variable_to_set : Variable , sound_to_change : Option < Sound > , pitch : Either < Number , Text > } , RoundNumberN { variable_to_set : Variable , number_to_round : Option < Number > , round_multiple : Option < Number > } , GetPlaceableBlocks { variable_to_set : Variable , item : Item } , SortList { variable_to_set : Variable , list_to_sort : Option < List > } , SetCustomSoundKey { variable_to_set : Variable , sound_to_change : Option < Sound > , sound_key : Option < Text > } , RemoveDictionaryEntry { dictionary_to_change : Variable , key_to_remove : Text , expected_values : Vec < AnyType > } , FormatTimestamp { variable_to_set : Variable , time_to_format : Number , custom_format : Option < Text > } , SetItemVisibilityFlags { variable_to_set : Variable , item : Option < Item > } , GetStringLength { variable_to_set : Variable , string_to_measure : Text } , GetItemPotionEffects { variable_to_set : Variable , item_to_get_effects_from : Item } , GetMiniMessageExpression { variable_to_set : Variable , text_to_read : MiniMessage } , SetYaw { } , SetItemPotionEffects { variable_to_set : Variable , item_to_change : Option < Item > , item_effects : Vec < Potion > } , DecrementNumberEq { variable : Variable , numbers_to : Vec < Number > } , GetItemCustomTag { variable_to_set : Variable , item_to_get_tag_of : Item , tag_name : Text } , CreateList { variable_to_set : Variable , value_list : Vec < AnyType > } , AppendListtoList { list_to_append_to : Variable , lists_to_append : Vec < List > } , GetContainerContents { variable_to_set : Variable , container_location : Location } , ShiftLocationTowardLocation { variable_to_set : Variable , location_to_shift : Option < Location > , target_location : Location , shift_distance : Option < Number > } , TrimList { variable_to_set : Variable , list_to_trim : Option < List > , start_index : Number , end_index : Option < Number > } , SettoCosine { variable_to_set : Variable , number_input : Number } , SetVectorComponent { variable_to_set : Variable , vector_to_change : Option < Vector > , component : Number } , ParseNumberfromString { variable_to_set : Variable , string_to_convert : Option < Text > } , SettoExponential { variable_to_set : Variable , number_input : Option < Number > , exponent : Option < Number > } , ShiftAllDirs { } , GetListIndexofValue { variable_to_set : Variable , list_to_search_in : List , value_to_search : AnyType } , RemoveItemEnchantment { variable_to_set : Variable , item_to_change : Option < Item > , enchantment_name : Text } , GetBookTextN { } , SetParticleRoll { variable_to_set : Variable , effect_to : Option < Particle > , particle_roll : Number } , SetSoundVariant { variable_to_set : Variable , sound_to_change : Option < Sound > , variant_id_eg_break1 : Option < Text > } , ShiftLocation { } , RandomizeList { variable_to_set : Variable , list_to_randomize : Option < List > } , ClampNumber { variable_to_set : Variable , number_to_clamp : Option < Number > , minimum : Number , maximum : Number } , Round { } , GetSoundPitch { variable_to_set : Variable , sound_to_get_pitch_or : Sound } , TranslateColors { } , GetBlockGrowth { variable_to_set : Variable , block_location : Location } , GetAllCustomItemTags { variable_to_set : Variable , item_to_get_tags_from : Item } , RemoveListValue { list_to_change : Variable , values_to : Vec < AnyType > } , ShiftLocationinAllDirections { variable_to_set : Variable , location_to_shift : Option < Location > , forwards_change : Option < Number > , upwards_change : Option < Number > , sideways_change_l__r : Option < Number > } , SetPlaceableBlocks { variable_to_set : Variable , item_to_change : Option < Item > , placeable_blocks : Vec < Block > } , GetBlockMaterial { variable_to_set : Variable , block_location : Location } , ParsePitch { } , GetDictionaryValue { variable_to_set : Variable , dictionary_to : Dict , key : Text } , GetContainerLock { variable_to_set : Variable , container_location : Location } , GetBlockPower { variable_to_set : Variable , block_location : Location } , GetVectorLength { variable_to_set : Variable , vector_to_get : Vector } , SetCustomModelData { variable_to_set : Variable , item_to_change : Option < Item > , model_value : Number } , SetCoords { } , GetParticleEffectSize { variable_to_set : Variable , effect_to_get : Option < Particle > } , }