use either :: Either ; use crate :: types :: * ; pub enum Repeat { RepeatAdjacently { gets_the_current : Variable , center_block : Location } , RepeatOnPath { gets_the_current : Variable , path_locations : Vec < Location > , point_spacing : Option < Number > } , RepeatMultipleTimes { gets_the : Option < Variable > , amount : Number } , RepeatOnGrid { gets_the_current : Variable , start_of_region : Location , end_of_region : Location } , RepeatWhile { } , Range { } , RepeatForEachinList { gets_the_current : Variable , list_to_repeat_through : List } , RepeatOnSphere { gets_the_current : Variable , sphere_center : Location , sphere_radius : Number , sphere_points : Option < Number > } , RepeatForever { } , RepeatOnRange { gets_the_current : Option < Variable > , start_of_range : Number , end_of_range : Number , step : Option < Number > } , RepeatForEachDictionaryEntry { gets_the_current_bkey : Variable , gets_the_current_xffd47fvalue : Variable , dictionary_to : Dict } , }