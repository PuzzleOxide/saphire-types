use either :: Either ; use crate :: types :: * ; pub enum SelectObject { LastMob { } , SelectRandomPlayer { selection_size : Option < Number > } , SelectLastSpawnedEntity { } , Shooter { } , AllMobs { } , SelectEntitiesbyName { uuid_to_check_for : Vec < Either < Text , MiniMessage > > } , FilterSelectionRandomly { selection_size : Option < Number > } , DefaultEntity { } , SelectPlayersbyName { name_or_uuid : Vec < Text > } , SelectAllEntities { } , Damager { } , FilterSelectionbyDistance { location_to : Location , selection_size : Option < Number > } , FilterSelectionbyRaycast { gets_the_end_or : Option < Variable > , ray_origin : Location , ray_distance : Number , ray_width : Option < Number > , selection_size : Option < Number > } , ResetSelection { } , SelectEventTarget { } , Killer { } , Victim { } , SelectEntitiesbyCondition { } , SelectAllPlayers { } , InvertSelection { } , RandomEntity { } , FilterSelectionbyCondition { } , MobsCond { } , FilterSelectionbySort { value_to : AnyType , selection_size : Option < Number > } , Projectile { } , DefaultPlayer { } , SelectPlayersbyCondition { } , MobName { } , }